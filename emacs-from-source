#!/usr/bin/env bash
# Copyright (C) 2017-2020 Michael Herstine <sp1ff@pobox.com>
CE_VERSION=1.3.0
CE_INSTALL=/opt/emacsen

#############################################################################
#                              utility functions                            #
#############################################################################

# get_os: guess the platform on which we're running
# invoke as: x=$(get_os) x will be one of "MacOS", "Ubuntu" or "RHEL"
# I'm not distinguishing among OS versions until I need to.
function get_os()
{
    case $(uname -s) in
        Darwin)
            echo "MacOS";;
        Linux)
            if test -f /etc/lsb-release; then
                echo "Ubuntu"
            elif test -f /etc/redhat-release; then
                echo "RHEL"
            else
                echo "Unsupported system" >&2
                exit 1
            fi;;
        *)
            echo "Unsupported system" >&2;
            exit 1;;
    esac
}

# install_pre_requisites
# invoke as: install_pre_requisites
function install_pre_requisites ()
{
    echo "Installing pre-requisites..." >&6

    local os=$(get_os)
    case $os in
        MacOS)
            set +e
            x=$(xcode-select --install 2>&1)
            if [ $? -ne 0 ]; then
                case $x in
                    xcode-select*already?installed*)
                        ;;
                    *)
                        echo $x >&2;
                        exit 1;;
                esac
            fi
            set -e
            brew install autoconf automake gnutls lmdb openssl texinfo;;
        Ubuntu)
            set -e
            sudo apt-get install -y build-essential;
            sudo apt-get -y build-dep emacs24;;
            # TODO(sp1ff): still required?
            # sudo apt-get install -y libwebkitgtk-dev libwebkitgtk-3.0-dev;
        RHEL)
            set -e
            sudo yum install -y autoconf automake make gcc-c\+\+ \
                 gnutls-devel ncurses texinfo;;
        *)
            echo "Internal error in install_pre_requisites" >&2;
            exit 1;;
    esac

    echo "Installing pre-requisites...done." >&6
}

# print_alises: print alias statements for the assorted programs installed with
# Emacs
# invoke as print_alises $install_dir $version
function print_aliases ()
{
    local install_dir="$1"
    local version="$2"
    local os=$(get_os)
    if test -z "$install_dir"; then
        echo "installation directory not given" >&2
        exit 1
    fi
    if test -z "$version"; then
        echo "installation sub-directory not given" >&2
        exit 1
    fi
    case $os in
        MacOS)
			echo alias emacs=$install_dir/$version/Emacs.app/Contents/MacOS/Emacs\;\
                 alias emacsclient=$install_dir/$version/Emacs.app/Contents/MacOS/bin/emacsclient\;\
                 alias ctags=$install_dir/$version/Emacs.app/Contents/MacOS/bin/ctags\;\
                 alias etags=$install_dir/$version/Emacs.app/Contents/MacOS/bin/etags\;\
                 alias ebrowse=$install_dir/$version/Emacs.app/Contents/MacOS/bin/ebrowse;;
		*)
			echo alias emacs=$install_dir/$version/bin/emacs\;\
                 alias emacsclient=$install_dir/$version/bin/emacsclient\;\
                 alias ctags=$install_dir/$version/bin/ctags\;\
                 alias etags=$install_dir/$version/bin/etags\;\
                 alias ebrowse=$install_dir/$version/bin/ebrowse;;
	esac
}

# compile_emacs: this will run `autogen' & `configure', first. This means we
# need to know the install directory (for the --prefix arg to `configured').

# invoke as: compile_emacs $source_directory $install_directory
function compile_emacs ()
{
    local srcdir=$1
    local instdir=$2

    echo "Compiling Emacs in \"$srcdir\" with instdir of \"$instdir\"..." >&6

    set -e

    local pfxarg=
    if test -z "$instdir"; then
        echo "WARNING: using default setting for --prefix to configure"
    else
        pfxarg="--prefix=$instdir"
    fi

    local os=$(get_os)

    local cppargs=""
    case $os in
        MacOS)
            # For whatever reason, `configure' can't find libxml on it's own,
            # _and_ it's location is constantly moving for me.
            if ! locate libxml/tree.h|grep -F 'SDKs/MacOSX.sdk'; then
                echo "Could not find libxml2-- the pre-requisites logic needs an update" >&2
                exit 1
            fi;
            libxml2=$(locate libxml/tree.h|grep -F 'SDKs/MacOSX.sdk'|head -n1);
            libxml2=$(dirname $libxml2);
            libxml2=$(dirname $libxml2);
            echo "Setting libxml2 to \"$libxml2\"";
            cppargs+="CPPFLAGS=-I$libxml2";;
    esac

    cd $srcdir

    case $os in
        MacOS)
            (echo $PATH|grep -q /usr/local/opt/texinfo/bin)|| export PATH="/usr/local/opt/texinfo/bin:$PATH"
            ./autogen.sh || exit 1;
            ./configure --with-ns $pfxarg $cppargs || exit 1;
            make bootstrap || exit 1;
            make || exit 1;;
        Ubuntu|RHEL)
            ./autogen.sh || exit 1;
            ./configure $pfxarg $cppargs || exit 1;
            make bootstrap || exit 1;
            make || exit 1;;
        *)
            echo "Internal error in compile_emacs." >&2;
            exit 1;;
    esac

    echo "Compiling Emacs in \"$srcdir\" with instdir of \"$instdir\"...done." >&6
}

# install_emacs: install multiple versions of Emacs side-by-side
# invoke as: install_emacs $install_root $version
function install_emacs ()
{
    local install_dir=$1
    local version=$2

    echo "Installing Emacs to $install_dir/$version..." >&6

    local os=$(get_os)

    set -e

    case $os in
        MacOS)
            make install;
            sudo mkdir -p $install_dir/$version;
            sudo cp -R nextstep/Emacs.app $install_dir/$version;;
        Ubuntu|RHEL)
            sudo make install;;
        *)
            echo "Internal error in compile_emacs." >&2;
            exit 1;;
    esac

    echo "Installing Emacs to $install_dir/$version...done." >&6

    print_aliases $install_dir $version
}

#
# update_emacs: update the emacs checkout directory
# invoke as: update_emacs $srcdir $branch_or_tag $is_tag_or_hash

# Where:

#     - $srcdir is the extant emacs checkout directory
#     - $branch_or_Tag is the desired branch name or tag; set
#       this to "master" to work on the trunk
#     - $is_tag_or_hash can be one of the following:
#       + "tag" if $branch_or_tag refers to a tag
#       + "" if $branch_or_tag names a branch and the caller
#         wishes to work on the head
#       + a git commit to work against a specific commit

# This function will:

#     1. cd to $srcdir
#     2. git checkout $branch_or_tag
#     3. if $is_tag_or_hash != "tag", git pull
#     4. if $is_tag_or_hash == "tag" or == "",
#        git reset --hard; else git reset --hard $is_tag_or_hash
#     5. git clean

function update_emacs ()
{
    local srcdir=$1
    local branch_or_tag=$2
    local is_tag_or_hash=$3

    echo "Updating Emacs in \"$srcdir\"..." >&6

    set -e
    cd $srcdir

    # http://ergoemacs.org/emacs/building_emacs_from_git_repository.html
    git checkout $branch_or_tag
    if test "$is_tag_or_hash" != "tag"; then
        git pull
    fi

    if test "$is_tag_or_hash" == "tag" -o -z "$is_tag_or_hash"; then
        git reset --hard
    else
        git reset --hard $is_tag_or_hash
    fi
    git clean -xdf

    echo "Updating Emacs in \"$srcdir\"...done." >&6
}

#############################################################################
#                                sub-commands                               #
#############################################################################

# bootstrap: install a built-from-source Emacs starting from scratch
# invoke as: bootstrap [OPTION...] [HASH]
function bootstrap ()
{
    local boot_branch=
    local boot_co_name=emacs
    local boot_force=false
    local boot_hash=
    local boot_help=
    local boot_install=$CE_INSTALL
    local boot_parent_dir=/tmp
    local boot_prev_option=
    local boot_tag=

    local boot_option=
    for boot_option
    do

        # If the previous option required an argument, assign it now.
        if test -n "$boot_prev_option"; then
            eval $boot_prev_option=\$boot_option
            boot_prev_option=
            continue
        fi

        # Parse out the argument option, in $boot_option
        case $boot_option in
            *=?*) boot_optarg=$(expr "X$boot_option" : '[^=]*=\(.*\)') ;;
            *=)   boot_optarg= ;;
            *)    boot_optarg=yes ;;
        esac

        # Handle options here
        case $boot_option in
            -b | --branch)
                boot_prev_option=boot_branch;;
            -b=* | --branch=*)
                boot_branch=$boot_optarg;;
            -d | --checkout-name | --name)
                boot_prev_option=boot_co_name;;
            -d=* | --checkout-name=* | --name=*)
                boot_co_name=$boot_optarg;;
            -f | --force)
                boot_force=:;;
            -h | --help | --hel)
                boot_help=yes;;
            -i | --install | --inst)
                boot_prev_option=boot_install;;
            -i=* | --install=* | --inst=*)
                boot_install=$boot_optarg;;
            -p | --parent | --parent-dir)
                boot_prev_option=boot_parent_dir;;
            -p=* | --parent=* | --parent-dir=*)
                boot_parent_dir=$boot_optarg;;
            -t | --tag)
                boot_prev_option=boot_tag;;
            -t=* | --tag=*)
                boot_tag=$boot_optarg;;
            -*)
                echo "unrecognized option: \`$boot_option'
Try \`$0 bootstrap --help' for more information" >&2;
                set +e;
                exit 2;;
            *)
                boot_hash=$boot_option;;
        esac
    done

    if test "$boot_help" == "yes"; then
        cat <<EOF
\`$0 bootstrap' installs a built-from-scratch Emacs starting from scratch.

Usage $0 bootstrap [OPTION]...

bootstrap options:

  -b, --branch=BRANCH      don't checkout master, checkout branch BRANCH
  -d, --checkout-name=NAME parent directory under which the Emacs source
                           shall be checked out
  -f, --force              force a checkout even if the directory to which
                           the Emacs source would be checked out exists (it
                           will be destroyed and re-created).
  -h, --help               print this message & exit with status zero
  -i, --install            directory into which multiple Emacsen shall be installed
  -p, --parent-dir         parent directory into which to checkout Emacs
  -t, --tag=TAG            don't checkout to HEAD; checkout a given tag

bootstrap arguments:

  COMMIT (optional) checkout the given branch to a given commit (may not be given
                    with --tag
EOF
        exit 0
    fi

    # Final checks on option combinations...
    if ! test -d "$boot_install"; then
        echo "Install directory $boot_install does not exist." >&2
        set +e
        exit 2
    fi

    if test -n "$boot_tag" && test -n "$boot_hash"; then
        echo "A tag can't be checked out to a given commit" >&2
        set +e
        exit 2
    fi

    # and get to work: start with the pre-requisities
    set -e
    install_pre_requisites

    cat >&6 <<EOF
===========================================================================
bootstrapping to $boot_parent_dir:

  - the checkout directory will be $boot_co_name
EOF

    test -d $boot_parent_dir || mkdir -p $boot_parent_dir
    if test -d $boot_parent_dir/$boot_co_name; then
        if $boot_force; then
            cat >&6 <<EOF
  - this directory exists, but will be re-created due to the --force flag.
EOF
            rm -rf $boot_parent_dir/$boot_co_name
        else
            cat >&6 <<EOF
  - there is already a directory named $boot_co_name in this directory; use
    --force to force its removal & recreation-- exiting.
===========================================================================
EOF
            exit 1
        fi
    fi

    # TODO(sp1ff): Re-factor; this logic is shared with `update', but
    # before I go to that trouble, I want to be sure this is the way
    # I want to handle it (it seems inelegant to me).
    local branch_or_tag=master
    local is_tag_or_hash="$boot_hash"
    if test -n "$boot_tag"; then
        branch_or_tag="$boot_tag"
        is_tag_or_hash="tag"
    elif test -n "$boot_branch"; then
        branch_or_tag="$boot_branch"
    fi

    cd $boot_parent_dir
    git clone git://git.sv.gnu.org/emacs.git $boot_co_name
    update_emacs $boot_parent_dir/$boot_co_name $branch_or_tag $is_tag_or_hash

    local commit=$(git rev-parse HEAD)
    # TODO(sp1ff): Re-factor; this logic is shared with `update', but
    # before I go to that trouble, I want to be sure this is the way
    # I want to handle it (it seems inelegant to me).
    local inst_name="$commit"
    if test -n "$boot_tag"; then
        inst_name="$boot_tag"
    elif test -n "$boot_branch"; then
        inst_name="$boot_branch-$commit"
    fi

    cat >&6 <<EOF
  - the install directory will be $boot_install/$inst_name
EOF

    if test -d $boot_install/$inst_name; then
        if $boot_force; then
            cat >&6 <<EOF
  - this directory exists, but will be re-created due to the --force flag.
===========================================================================

EOF
            sudo rm -rf $boot_install/$inst_name
        else
            cat >&6 <<EOF
  - there is already a directory named $inst_name in this directory; use
    --force to force its removal & re-creation-- exiting.
===========================================================================

EOF
            exit 1
        fi
    fi

            cat >&6 <<EOF
===========================================================================
EOF

    test -d $boot_install/$inst_name || sudo mkdir -p $boot_install/$inst_name
    compile_emacs $boot_parent_dir/$boot_co_name $boot_install/$inst_name
    install_emacs $boot_install $inst_name
    sudo ln -s $boot_install/$inst_name $boot_install/current
}

# define_aliases: print aliases for emacs & emacsclient
# invoke as: define_aliaes [OPTIONS] VERSION
function define_aliases()
{
    local als_help=false
    local als_install=$CE_INSTALL
    local als_name="current"
    local als_prev_option=
    local als_option

    for als_option
    do

        # If the previous option required an argument, assign it now.
        if test -n "$als_prev_option"; then
            eval $als_prev_option=\$als_option
            als_prev_option=
            continue
        fi

        # Parse out the argument option, in $up_option
        case $als_option in
            *=?*) als_optarg=$(expr "X$als_option" : '[^=]*=\(.*\)') ;;
            *=)   als_optarg= ;;
            *)    als_optarg=yes ;;
        esac

        # Handle options here
        case $als_option in
            -h | --he | --hel | --help)
                als_help=yes;;
            -i | --install | --inst)
                als_prev_option=als_install;;
            -i=* | --install=* | --inst=*)
                als_install=$als_optarg;;
            *)
                als_name=$als_option;;
        esac

    done

    if test "$als_help" == "yes"; then
        cat <<EOF
\`$0 alias' prints alias definitions for \`emacs' & \`emacsclient' which
will invoke the versions built from source.

Usage eval \`$0 aliases [OPTION]... [VERSION]'

Options:

  -h, --help    print this message exit with status zero
  -i, --install directory into which multiple Emacsen have be installed

VERSION shall be the particular Emacs version to be invoked; if omitted,
current will be assumed.
EOF
        exit 0
    fi

    print_aliases $als_install $als_name

}

# update: update an extant repro, optionally re-build
# invoke as: update $@
function update ()
{
    local up_branch=
    local up_hash=
    local up_help=
    local up_install=$CE_INSTALL
    local up_norebuild=false
    local up_prev_option=
    local up_srcdir=
    local up_tag=

    local up_option
    for up_option
    do

        # If the previous option required an argument, assign it now.
        if test -n "$up_prev_option"; then
            eval $up_prev_option=\$up_option
            up_prev_option=
            continue
        fi

        # Parse out the argument option, in $up_option
        case $up_option in
            *=?*) up_optarg=$(expr "X$up_option" : '[^=]*=\(.*\)') ;;
            *=)   up_optarg= ;;
            *)    up_optarg=yes ;;
        esac

        # Handle options here
        case $up_option in
            -h | --he | --hel | --help)
                up_help=yes;;
            -i | --in | --ins | --inst | --install)
                up_prev_option=up_install;;
            -i=* | --in=* | --ins=* | --inst=* | --install=*)
                up_install=$up_optarg;;
            -n | --no-reb | --no-rebuild | --no-build)
                up_norebuild=yes;;
            -s | --srcdir | --src)
                up_prev_option=up_srcdir;;
            -s=* | --srcdir=* | --src=*)
                up_srcdir=$up_optarg;;
            -t | --tag)
                up_prev_option=up_tag;;
            -t=* | --tag=*)
                up_tag=$up_optarg;;
            -b | --branch)
                up_prev_option=up_branch;;
            -b=* | --branch=*)
                up_branch=$up_optarg;;
            -*)
                echo "unrecognized option: \`$up_option'
Try \`$0 bootstrap --help' for more information" >&2;
                set +e;
                exit 2;;
            *)
                up_hash=$up_option;;
        esac
    done

    if test "$up_help" == "yes"; then
        cat <<EOF
\`$0 update' updates an extant emacs checkout & optionally re-builds.

Usage $0 update [OPTION]...

update options:

  -i, --install=INSTDIR   directory into which multiple Emacsen shall be installed
  -n, --no-rebuild        don't re-build
  -s, --srcdir=DIRNAME    directory containing the Emacs source code (required)
  -t, --tag=TAG           don't checkout to HEAD; checkout a given tag
  -b, --branch=BRANCH     don't checkout master, checkout branch BRANCH

update arguments:

  COMMIT (optional) checkout the given branch to a given commit (may not be given
                    with --tag)

Use this if you're maintaining a local git repo & continuously updating. IOW,
you might run \`emacs-from-source boostrap -s /foo/bar/splat' once to set up
your local repo, then repeatedly call \`emacs-from-source update -s
/foo/bar/splat' to switch branches, update HEAD, and so forth.
EOF
        exit 0
    fi

    if test -z "$up_srcdir"; then
        echo "Update: No --srcdir specified." >&2
        exit 2
    fi

    if ! test -d "$up_srcdir"; then
        echo "$up_srcdir does not exist. Exiting." >&2
        exit 2
    fi

    if test -z "$up_install"; then
        echo "No --install specified." >&2
        exit 2
    fi

    if ! test -d "$up_install"; then
        echo "Install directory $up_install does not exist." >&2
    fi

    if test -n "$up_tag" && test -n "$up_hash"; then
        echo "A tag ($up_tag) can't be checked out to a given commit ($up_hash)" >&2
        exit 2
    fi

    set -e

    # TODO(sp1ff): Re-factor; this logic is shared with `bootstrap', but
    # before I go to that trouble, I want to be sure this is the way
    # I want to handle it (it seems inelegant to me).
    local branch_or_tag=master
    local is_tag_or_hash="$up_hash"
    if test -n "$up_tag"; then
        branch_or_tag="$up_tag"
        is_tag_or_hash="tag"
    elif test -n "$up_branch"; then
        branch_or_tag="$up_branch"
    fi

    update_emacs $up_srcdir $branch_or_tag $is_tag_or_hash

    if test "$up_norebuild" == "yes"; then
        return 0
    fi

    # TODO(sp1ff): Re-factor; this logic is shared with `bootstrap', but
    # before I go to that trouble, I want to be sure this is the way
    # I want to handle it (it seems inelegant to me).
    local commit=$(git rev-parse HEAD)
    local inst_name="$commit"
    if test -n "$up_tag"; then
        inst_name="$up_tag"
    elif test -n "$up_branch"; then
        inst_name="$up_branch-$commit"
    fi

    compile_emacs . $up_install/$inst_name
    install_emacs $up_install $inst_name
}

function just_make()
{
    local mk_help=
    local mk_install=$CE_INSTALL
    local mk_prev_option=
    local mk_srcdir=
    local mk_tag=

    local mk_option
    for mk_option
    do

        # If the previous option required an argument, assign it now.
        if test -n "$mk_prev_option"; then
            eval $mk_prev_option=\$mk_option
            mk_prev_option=
            continue
        fi

        # Parse out the argument option, in $mk_option
        case $mk_option in
            *=?*) mk_optarg=$(expr "X$mk_option" : '[^=]*=\(.*\)') ;;
            *=)   mk_optarg= ;;
            *)    mk_optarg=yes ;;
        esac

        # Handle options here
        case $mk_option in
            -h | --he | --hel | --help)
                mk_help=yes;;
            -i | --in | --ins | --inst | --install)
                mk_prev_option=mk_install;;
            -i=* | --in=* | --ins=* | --inst=* | --install=*)
                mk_install=$mk_optarg;;
            -s | --srcdir | --src)
                mk_prev_option=mk_srcdir;;
            -s=* | --srcdir=* | --src=*)
                mk_srcdir=$mk_optarg;;
            -t | --tag)
                mk_prev_option=mk_tag;;
            -t=* | --tag=*)
                mk_tag=$mk_optarg;;
            *)
                echo "unrecognized option: \`$mk_option'
Try \`$0 make --help' for more information" >&2;
                set +e;
                exit 2;;
        esac
    done

    if test "$mk_help" == "yes"; then
        cat <<EOF
\`$0 make' just makes an extant emacs checkout & installs it.

Usage $0 make [OPTION]...

update options:

  -i, --install=INSTDIR   directory into which multiple Emacsen shall be installed
  -s, --srcdir=DIRNAME    directory containing the Emacs source code (required)
  -t, --tag=TAG           this branch wasn't checked out to HEAD; but was rather
                          checked out to tag

Use this if you've already updated & just want to re-build.

TODO: Have this function figure out TAG for itself, rather than needing
to be told.
EOF
        exit 0
    fi

    if test -z "$mk_srcdir"; then
        echo "Make: No --srcdir specified." >&2
        exit 2
    fi

    if ! test -d "$mk_srcdir"; then
        echo "$mk_srcdir does not exist. Exiting." >&2
        exit 2
    fi

    if test -z "$mk_install"; then
        echo "No --install specified." >&2
        exit 2
    fi

    if ! test -d "$mk_install"; then
        echo "Install directory $mk_install does not exist." >&2
    fi

    set -e
    cd "$mk_srcdir"
    # https://stackoverflow.com/questions/6245570/how-to-get-the-current-branch-name-in-git?rq=1
    mk_branch=`git branch | grep \* | cut -d ' ' -f2`
    if test "$mk_branch" = "master"; then
        mk_branch=""
    fi

    # TODO(sp1ff): Re-factor; this logic is shared with `bootstrap' & `update',
    # but before I go to that trouble, I want to be sure this is the way I want
    # to handle it (it seems inelegant to me).
    local commit=$(git rev-parse HEAD)
    local inst_name="$commit"
    if test -n "$mk_tag"; then
        inst_name="$mk_tag"
    elif test -n "$mk_branch"; then
        inst_name="$mk_branch-$commit"
    fi

    compile_emacs $mk_srcdir $mk_install/$inst_name
    install_emacs $mk_install $inst_name
}

function make_current ()
{
    local mc_help=fase
    local mc_install=$CE_INSTALL
    local mc_target=

    local mc_option=
    local mc_prev_option=
    for mc_option
    do

        # If the previous option required an argument, assign it now.
        if test -n "$mc_prev_option"; then
            eval $mc_prev_option=\$mc_option
            mc_prev_option=
            continue
        fi

        # Parse out the argument option, in $up_option
        case $mc_option in
            *=?*) mc_optarg=$(expr "X$mc_option" : '[^=]*=\(.*\)') ;;
            *=)   mc_optarg= ;;
            *)    mc_optarg=yes ;;
        esac

        # Handle options here
        case $mc_option in
            -h | --he | --hel | --help)
                mc_help=yes;;
            -i | --install | --inst)
                mc_prev_option=mc_install;;
            -i=* | --install=* | --inst=*)
                mc_install=$mc_optarg;;
            *)
                mc_target=$mc_option;;
        esac

    done

    if test "$mc_help" == "yes"; then
        cat <<EOF
\`$0 make-current sets up a symlink named "current" in the install directory
for convenience.

Usage: \`$0 make-current [OPTION...] TARGET

Options:

  -h, --help:    print this message & exit with status zero
  -i, --install: directory into which multiple Emacsen have been installed
                 (default: $CE_INSTALL)

TARGET: "install" sub-directory to which \`current' shall be linked.
EOF
        exit 0
    fi

    set -e

    if test -z "$mc_target"; then
        echo "target must be specified" >&2
        set +e
        exit 2
    fi

    if test -L $mc_install/current; then
        sudo rm -f $mc_install/last
        sudo ln -s $(readlink $mc_install/current) $mc_install/last
        sudo rm    $mc_install/current
    fi
    sudo ln -s $mc_install/$mc_target $mc_install/current
}

function revert_to_last ()
{
    local rtl_help=false
    local rtl_install=$CE_INSTALL

    local rtl_option=
    local rtl_prev_option=
    for rtl_option
    do

        # If the previous option required an argument, assign it now.
        if test -n "$rtl_prev_option"; then
            eval $rtl_prev_option=\$rtl_option
            rtl_prev_option=
            continue
        fi

        # Parse out the argument option, in $up_option
        case $rtl_option in
            *=?*) rtl_optarg=$(expr "X$rtl_option" : '[^=]*=\(.*\)') ;;
            *=)   rtl_optarg= ;;
            *)    rtl_optarg=yes ;;
        esac

        # Handle options here
        case $rtl_option in
            -h | --he | --hel | --help)
                rtl_help=yes;;
            -i | --install | --inst)
                rtl_prev_option=rtl_install;;
            -i=* | --install=* | --inst=*)
                rtl_install=$rtl_optarg;;
            *)
                echo "unrecognized argument: \`$rtl_option'
Try \`$0 revert --help for more information" >&2;
                set +e
                exit 2;;
        esac

    done

    if test "$rtl_help" == "yes"; then
        cat <<EOF
\`$0 revert moves the symlink named "current" in the install directory to the
target of "last". A symlink named "bad" is set to the previous target of
"current"

Usage: \`$0 revert [OPTION...]

Options:

  -h, --help:    print this message & exit with status zero
  -i, --install: directory into which multiple Emacsen have been installed
                 (default: $CE_INSTALL)
EOF
        exit 0
    fi

    set -e

    sudo rm -f $rtl_install/bad
    sudo ln -s $(readlink $rtl_install/current) $rtl_install/bad
    sudo rm -f $rtl_install/current
    sudo ln -s $(readlink $rtl_install/last) $rtl_install/current
    sudo rm -f $rtl_install/last

    echo "current is now $(readlink $rtl_install/current)."

}

#############################################################################
# Parse the global options & the sub-command
#############################################################################
ce_cmd=
ce_help=
ce_prev_option=
ce_silent=false
ce_version=false
ce_nargs=0
for ce_option
do

    # If the previous option required an argument, assign it now.
    if test -n "$ce_prev_option"; then
        eval $ce_prev_option=\$ce_option
        ce_prev_option=
        ce_nargs=$(($ce_nargs+1))
        continue
    fi

    # Parse out the argument option, in $ce_option
    case $ce_option in
        *=?*) ce_optarg=$(expr "X$ce_option" : '[^=]*=\(.*\)') ;;
        *=)   ce_optarg= ;;
        *)    ce_optarg=yes ;;
    esac

    # Handle options here
    case $ce_option in
        -h | --he | --hel | --help)
            ce_help=yes;
            ce_nargs=$(($ce_nargs+1));;
        -s | -q | --sil | --sile | --silen | --silent | --quiet)
            ce_silent=yes;
            ce_nargs=$(($ce_nargs+1));;
        -V | --ver | --vers | --versi | --versio | --version)
            ce_version=yes;
            ce_nargs=$(($ce_nargs+1));;
        -*)
            echo "unrecognized option: \`$ce_option'
Try \`$0 --help' for more information" >&2;
            set +e;
            exit 2;;
        *)
            ce_cmd=$ce_option;
            ce_nargs=$(($ce_nargs+1));
            break;;
    esac

done

if test "$ce_help" == "yes"; then

    cat <<EOF
\`$0' builds, installs and manages Emacsen built from source.

This is $0 version $CE_VERSION.

Usage $0 [OPTION]... COMMAND [OPTION...]

Global options:

  -h, --help     display this help and exit with status zero
  -q, --quiet    display no output
  -V, --version  display version information and exit

Sub-commands are: aliases, bootstrap, update, make, make-current & revert.

Run \`$0 COMMAND --help' for help on each sub-command.
EOF
    exit 0
fi

if test "$ce_version" == "yes"; then
    cat <<EOF
\`$0' $CE_VERSION
EOF
    exit 0
fi

exec 6>&1
test "$ce_silent" == yes && exec 6>/dev/null

shift $ce_nargs
case $ce_cmd in
    alias*)
        define_aliases $@;;
    bootstrap|init|start)
        bootstrap $@;;
    up|update|rel|release|rev|tag)
        update $@;;
    make-current)
        make_current $@;;
    make)
        just_make $@;;
    revert|fallback)
        revert_to_last $@;;
    *)
        echo "unrecognized sub-command: \`$ce_cmd'
Try \`$0 --help' for more information" >&2;
        set +e;
        exit 2;;
esac

# End.
